데이터베이스 데이터베이스 - Story Board - 13 회차 : 릴레이션 정규화 김 은 경 ,1
릴레이션 정규화 2 학습목표 동기유발 & 학습목표 학습내용 1. 갱신 이상과 함수적 종속 학습목표 2. 단계별 정규화와 역정규화 1. 갱신 이상이 무엇인지 설명할 수 있다.  2. 함수적 종속이 무엇인지 설명할 수 있다.  1. 정규화가 무엇인지 설명할 수 있다.  2. 정규화의 단계를 설명할 수 있다.  2. 역정규화가 필요한 이유를 설명할 수 있다.  ,1
릴레이션 정규화 3 Lesson.   갱신 이상과 함수적 종속 1. 갱신 이상 2. 함수적 종속 3. 완전 함수적 종속과 부분 함수적 종속 4. 이행적 함수적 종속 갱신 이상과 함수적 종속 ,1
릴레이션 정규화 4 갱신 이상 1. 갱신 이상 (1) 갱신 이상(Update Anomaly)이란?   - 관계 DB를 조작할 때 데이터의 중복으로 인해 발생하는 문제점을 의미한다.  (2)  갱신 이상의 종류 ① 삽입 이상(Insertion Anomaly)  - 불필요한 데이터를 함께 삽입하지 않으면 어떤 데이터를 삽입하는 것이 불가능한 문제점 - 즉  데이터를 삽입할 때 원하지 않는 불필요한 데이터를 같이 삽입해야 하는 것 ② 수정 이상(Modification Anomaly) - 중복된 데이터 가운데 일부만 수정되어 데이터의 불일치가 발생하는 문제점 ③ 삭제 이상(Deletion Anomaly) - 어떤 데이터를 삭제하면 유용한 데이터도 함께 삭제되는 문제점 ,1
릴레이션 정규화 5 갱신 이상 (3) 갱신 이상 사례 1) 사례 1: 수강 릴레이션 - 학생이 수강한 교과목 정보와 성적 및 학년 정보 저장 - 기본 키 : {학번  교과목번호}  학번 교과목번호 성적 학년 100 C413 A 4 100 E412 A 4 200 C123 B 3 300 C312 A 1 300 C324 C 1 300 C413 A 1 400 C312 A 4 400 C324 A 4 400 C413 B 4 400 E412 C 4 500 C312 B 2 수강 수강 릴레이션에 서 여러 가지 갱신 이상이 발생 하는 이유는? 같은 학번에 대 해 학년 정보가 중복되어 있기 때문이다.  ,1
릴레이션 정규화 6 갱신 이상 ① 삽입 이상 - 600번 학생이 2학년이라는 사실을 삽입하려는데  교과목번호에 대한 정보가 없어서 불가능함  기본 키를 구성하는 ‘교과목번호’에 임의의 값을 지정해서 삽입해야 함 - 원하지 않는(불필요한) 정보를 강제로 삽입해야 함 ② 수정 이상 - C312 교과목을 수강한 400번 학생의 학년을 4에서 3으로 변경하면   나머지 3개 데이터의 학년 정보와 불일치가 발생함  학번이 400번인 데이터를 모두 찾아서 전부 변경해야 함 - 중복된 데이터의 일부 갱신으로 인해 정보의 모순이 발생함 ③ 삭제 이상 - 200번 학생이 C123의 수강을 취소해서 삭제시키면  200번 학생이 3학년이라는 정보도 함께 삭제됨  유용한 정보가 사라짐 - 연쇄 삭제(Triggered deletion)로 인해 유용한 정보가 손실됨 ,1
릴레이션 정규화 7 갱신 이상 2) 사례 2: 사원정보 릴레이션 - 사원과 부서 정보를 함께 저장함 (기본 키는 사원번호와 부서번호의 조합) - 단  한 사원이 여러 부서에 근무할 수 있는 상황임 사원이름 사원번호 주소 전화번호 부서번호 부서이름 김길동 1001 서울시 강남구 02-485-3949 1 영업 박영숙 1002 서울시 동작구 02-683-5542 2 개발 박영숙 1002 서울시 동작구 02-683-5542 3 기획 이창민 1003 천안시 성정동 041-756-4857 2 개발 최수민 1004 서울시 강북구 02-339-4957 1 영업 ,1
릴레이션 정규화 8 갱신 이상 ① 정보 중복 - 각 사원이 속한 부서 수만큼 동일한 사원의 정보가 존재해야 하므로 사원이름  사원번호  주소  전화번호 등이 중복 저장되어 저장 공간이 낭비된다.  ② 수정 이상 - 만일 어떤 부서의 이름이 바뀔 때 이 부서에 근무하는 일부 사원 정보의 부서이름만 변경하면 데이터의 불일치가 발생한다.  ③ 삽입 이상 - 만일 어떤 부서를 신설했는데 아직 사원이 한 명도 배정되지 않았다면   이 부서에 관한 정보를 입력할 수 없다.  ④ 삭제 이상 – 만일 단 한 명만 근무하는 부서가 있는 경우  그 사원 정보를 삭제하면 그 사원이 속한 부서에 관한 정보도 함께 삭제된다.  ,1
릴레이션 정규화 9 갱신 이상 (4) 갱신 이상의 원인 - 릴레이션 스키마를 생성할 때 속성들 간의 종속성을 충분히 고려하지 않아서 불필요한 데이터가 중복되었기 때문이다.  - 즉  한 개체의 속성들 간에 존재하는 여러 개의 종속 관계를 하나의 릴레이션으로 표현했기 때문이다.  (5) 갱신 이상 해결 방법 - 릴레이션 스키마를 변환해서 속성들 간의 여러 종속 관계를 분해(Decomposition)한다.  즉  릴레이션을 분해해서 하나의 종속 관계는 하나의 릴레이션으로 표현한다.  이 과정을 릴레이션 정규화(Relation Normalization)라고 칭함 ,1
릴레이션 정규화 10 함수적 종속 2. 함수적 종속 (1) 함수적 종속(Functional Dependency: FD) 이해 1) 함수적 종속이란?  - 속성들 간의 대응 관계를 보다 수학적으로 규명하기 위해 E. F. Codd가 제안한 이론으로   정규화의 핵심적인 개념이다.   - 릴레이션이 갖고 있는 갱신 이상을 발견하기 위한 하나의 수단이다.  - 속성들 간의 관계(Relationship)에 대한 제약 조건에 해당한다.   2) 함수적 종속의 정의 및 표현 방법 - 속성 X의 값이 속성 Y의 값을 결정지으면  즉 속성 X의 각각의 값에 대해 속성 Y의 값이 오직 하나만 연관되면  속성 Y는 속성 X에 함수적으로 종속된다고 하고  다음과 같이 표현한다.  X → Y . X: 결정자(Determinant) . Y: 종속자(Dependent)   결정자 - 주어진 릴레이션에서 다른 속성(또는 속성의 집합)을 고유하게 결정하는 하나 이상의 속성들  종속자 - 결정자에 의해서 값이 결정되는 하나 이상의 속성들 ,1
릴레이션 정규화 11 함수적 종속 3) 예제 1 : 학생 릴레이션의 함수적 종속 관계 분석 ① 이름이 같은 학생이 여러 명 있을 수 있으므로  이름을 알아도 학번이나 학년  학과를 알 수 없다.  -> 이름이 학번이나 학년  학과를 함수적으로 결정하지 않는다. ② 모든 학생의 학번이 서로 다르므로  학번을 알면 이름과 학년  학과를 알 수 있다.  -> 학번이 알면 이름과 학년  학과를 함수적으로 결정한다.  학생(학번  이름  학년  학과)  학번 이름 학년 학과 20113910 김철수 2 컴퓨터 20123929 이영희 1 전기 20103932 민동규 3 전자 20113934 장영주 2 컴퓨터 20123900 김철수 1 정통 학생 ,1
릴레이션 정규화 12 함수적 종속  학생 릴레이션의 함수적 종속 관계 표현: 학번 → 이름 학번 → 학년 학번 → 학과 학번 → (이름  학년  학과) 또는 학번 → 이름 | 학년 | 학과 또는  릴레이션 R에서 속성 X가 기본 키이면   R의 모든 속성 Y에 대해 X  → Y가 성립한다.   ,1
릴레이션 정규화 13 함수적 종속 4) 예제 2 : 사원 릴레이션의 함수적 종속 관계 분석 ① 사원번호만 알면 사원이름과 주소  연락처를 알 수 있다.  -> 사원번호가 사원이름과 주소  연락처를 함수적으로 결정한다.   함수적 종속 표현 :  사원번호 → (사원이름  주소  연락처)  ② 부서번호를 알면 부서이름을 알 수 있다.           -> 부서번호가 부서이름을 함수적으로 결정한다.   함수적 종속 표현 :  부서번호 →  부서이름 사원(사원번호   부서번호  부서이름  이름  직책  주소  연락처)  단  한 사원이 2개 이상의 부서에 소속되어 근무할 수 있고  각 부서에서의 직책이 다를 수 있다.  사원번호 부서번호 부서이름 이름 직책 주소 연락처 3214 100 기획팀 김철수 팀장 서울 010-2300-1232 2456 200 개발팀 이영호 프로그래머 천안 010-9932-3234 2456 300 연구팀 이영호 설계자 천안 010-9932-3234 4602 100 기획팀 박민희 사원 서울 010-3329-0032 3722 300 연구팀 김철수 팀장 천안 010-3398-2136 사원 ,1
릴레이션 정규화 14 함수적 종속 ③ 부서이름을 알면 부서번호를 알 수 있다.   (사람 이름과는 달리 일반적으로 동일한 이름을 갖는 부서가 없으므로)  -> 부서이름이 부서번호를 함수적으로 결정한다.   함수적 종속 표현 :  부서이름 →  부서번호 ④ 사원번호와 부서번호를 모두 알아야 직책을 알 수 있다 -> {사원번호  부서번호}가 직책을 함수적으로 결정한다.  함수적 종속 표현 :  {사원번호  부서번호} → 직책 ⑤ 사원이름을 알아도 사원번호나 부서번호  주소 등을 알 수 없다.  -> 사원이름은 나머지 속성들을 함수적으로 결정하지 않는다.   사원 릴레이션의 함수적 종속 관계 표현: 사원번호 → (사원이름  주소  연락처)  부서번호 → 부서이름 부서이름 → 부서번호 {사원번호  부서번호} → 직책 {사원번호  부서번호}가 기본 키이므로 나머지 모든 속성의 결정자를 역할을 하지만  여기에서는 뒤에서 설명할 완전 함수 종속 관계만을 표현한 것임 ,1
릴레이션 정규화 15 함수적 종속 3) 예제 3 : 회원관리 릴레이션의 함수적 종속 관계 분석 회원관리 (회원번호  회원명  연락처  가입일자  담당트레이너  트레이너이름  트레이너연락처)  회원 회원번호 회원명 연락처 가입일자 담당 트레이너 트레이너 이름 트레이너 연락처 1001 김길동 010-3485-3949 2014/3/1 1 장영민 041-575-1231 1002 박영숙 010-6383-5542 2014/3/1 2 민동진 041-575-1232 1003 이창민 010-2683-5542 2014/3/15 1 장영민 041-575-1231 1004 이민수 041-840-1234 2014/4/10 2 민동진 041-575-1232 1005 김영미 041-840-1234 2014/4/10 1 장영민 041-575-1231 1006 박민이 001-6333-5212 2014/4/25 2 민동진 041-575-1232 1007 최영민 010-2793-1242 2014/4/30 1 장영민 041-575-1231 1008 김동수 010-3025-0249 2014/5/2 2 민동진 041-575-1232 1009 박영숙 010-6243-1042 2014/5/8 1 장영민 041-575-1231 1010 박장수 010-2083-5302 2014/5/8 2 민동진 041-575-1232 1011 이정이 010-3756-2957 2014/5/10 3 김은미 041-575-1231 ,1
릴레이션 정규화 16 함수적 종속 ① 회원이름은 현재 동명이인이 존재하므로 결정자가 될 수 없음 ▶ 회원이름이 회원번호나 연락처  담당 트레이너 등을 함수적으로 결정하지 않음 ② 트레이너 이름은 현재는 동명이인이 존재하지 않으나 추후 동명이인의 가능성을 배제할 수 있으 므로 결정자가 될 수 없음 ③ 회원번호를 몰라도 담당트레이너의 번호만 알면 트레이너의 이름이나 연락처를 알 수 있음 ▶ 담당트레이너 속성이 트레이너이름과 트레이너연락처를 함수적으로 결정함 ④ 트레이너 연락처는 사무실 번호로  여러 명의 트레이너가 동일한 번호를 공유하므로 결정자가 될 수 없음 ⑤ 회원번호는 기본 키이므로 나머지 모든 속성을 함수적으로 결정함  회원관리 릴레이션의 함수적 종속 관계 표현: 회원번호 → (회원명  연락처  가입일자  담당트레이너  트레이너이름  트레이너연락처)  담당트레이너 → (트레이너이름  트레이너연락처) ,1
릴레이션 정규화 17 함수적 종속 (2) 함수적 종속 다이어그램 1) 함수적 종속 다이어그램(Functional Dependency Diagram : FDD)이란?  - 함수적 종속 관계를 그림으로 표현하는 방법이다.   - 결정자와 종속자를 모두 직사각형으로 표시하고  화살표로 연결해서 표시한다.  2) 예제 1 :  교과목 릴레이션의 FDD 작성 교과목(교과목번호  교과목명  학점  학과  담당교수)  교과목번호 교과목명 학점 학과 담당교수 C123 컴퓨터개론 3 컴퓨터 1102 C234 프로그래밍 3 전자 1200 C257 자료구조 3 컴퓨터 1322 C156 프로그래밍 2 전기 1565 C198 데이터베이스 3 컴퓨터 1422 ,1
릴레이션 정규화 18 함수적 종속 ② FDD 작성 교과목번호 교과목명 학점 학과 담당교수 ① 함수적 종속 관계 분석 a) 결정자 역할을 하는 속성은 기본 키인 교과목번호 밖에 없다.  -> 교과목번호가 나머지 모든 속성들을 함수적으로 결정한다.  함수적 종속 표현 :  교과목번호 → (교과목명  학점  학과  담당교수) b) 교과목명을 알아도 교과목번호나 학점  학과  담당교수를 알 수 없으므로 교과목명은 어떤 속성도 함수적으로 결정하지 않는다.  (동일한 교과목명을 갖는 강의가 서로 다른 학과에서 개설되어  다른 교과목번호와 학점 등으로 표현될 수 있기 때문)  ,1
릴레이션 정규화 19 함수적 종속 3) 예제 2 :  사원 릴레이션의 FDD 작성 사원(사원번호   부서번호  사원이름  주소  전화번호  직책  부서이름)  단  한 사원이 2개 이상의 부서에 소속되어 근무할 수 있고  각 부서에서의 직책이 다를 수 있다.  사원번호 → (사원이름  주소  전화번호)  부서번호 → 부서이름 부서이름 → 부서번호 {사원번호  부서번호} → 직책 ① 함수적 종속 관계 표현 사원번호 부서번호 부서이름 이름 직책 주소 연락처 3214 100 기획팀 김철수 팀장 서울 010-2300-1232 2456 200 개발팀 이영호 프로그래머 천안 010-9932-3234 2456 300 연구팀 이영호 설계자 천안 010-9932-3234 4602 100 기획팀 박민희 사원 서울 010-3329-0032 3722 300 연구팀 김철수 팀장 천안 010-3398-2136 사원 ,1
릴레이션 정규화 20 함수적 종속 ② FDD 작성 사원번호 사원이름 주소 전화번호 부서번호 부서이름 직책 ,1
릴레이션 정규화 21 함수적 종속 3. 완전 함수적 종속과 부분 함수적 종속 - 결정자가 복합 속성인 경우  종속자를 완전 또는 부분 함수적 종속으로 구분할 수 있다.  (1) 완전 함수적 종속(Full Functional Dependency)이란?  - 복합 속성 X에 대해서 X → Y가 성립할 때  X⊂X 이고 X→ Y 를 만족하는 속성 X’ 이 존재하지 않으면  속성 Y는 복합 속성 X에 완전 함수적 종속이라 칭한다.  - 즉  결정자인 복합 속성에 포함되는 속성 가운데 단독으로 결정자 역할을 하는 속성이 없으면   종속자가 결정자에 완전 함수적 종속이라고 칭한다. A B C [완전 함수적 종속 다이어그램] 복합 속성인 {A  B}가 C의 결정자이며  A나 B만으로는 C를 결정 할 수 없다. ,1
릴레이션 정규화 22 함수적 종속 (2) 부분 함수적 종속(Partial Functional Dependency)이란?  - 복합 속성 X에 대하여 X → Y가 성립할 때  X⊂X 이고 X→ Y 를 만족하는 속성 X’ 이 존재하면   속성 Y는 복합 속성 X에 부분 함수적 종속이라 칭한다.  - 즉  결정자인 복합 속성에 포함되는 속성 가운데 단독으로 결정자 역할을 하는 속성이 있으면   종속자가 결정자에 부분 함수적 종속이라고 칭한다. A B C [부분 함수적 종속 다이어그램] 복합 속성인 {A  B}가 C의 결정자이지만  B 만으로도 C를 결정할 수 있다. ,1
릴레이션 정규화 23 함수적 종속 (3) 예제 : 사원 릴레이션의 완전 및 부분 함수적 종속 관계 분석 - 복합속성 X = {사원번호  부서번호}에 대해 {사원번호  부서번호} → (직책  사원이름  주소   전화번호  부서이름)가 성립하며    ① 직책의 결정자는 복합속성 X이고  사원번호나 부서번호만으로는 직책을 결정하지 못하므로 직책은 결정자 X에 완전 함수적 종속이다.  ② 사원이름  주소  전화번호의 결정자는 사원번호이고  사원번호는 복합속성 X에 포함되므로 사원이름  주소  전화번호는 결정자 X에 부분 함수적 종속이다.  ③ 부서이름의 결정자는 부서번호이고  부서번호는 복합속성 X에 포함되므로 부서이름은 결정자 X에 부분 함수적 종속이다.  사원번호 사원이름 주소 전화번호 부서번호 부서이름 직책 ,1
릴레이션 정규화 24 함수적 종속 4) 예제 : 수강 릴레이션의 완전 및 부분 함수적 종속 관계 분석  ① 성적 : {학번  교과목번호}에 완전 함수적 종속이다.  ② 학년 : {학번  교과목번호}에 부분 함수적 종속이다 수강(학번  교과목번호  성적  학년)  FD:  {학번  교과목번호}  → 성적 학번 → 학년 FDD:  학번 교과목번호 성적 학년 ,1
릴레이션 정규화 25 함수적 종속 4.  이행적 함수적 종속 (1) 이행적 함수적 종속(Transitive Functional Dependency)이란?  - 한 릴레이션의 속성 A  B  C가 있을 때 다음과 같은 필요 충분 조건을 만족하는 경우   속성 C가 속성 A에 이행적(또는 추이적) 함수적 종속이라고 한다.  (2) 예제 : 학생 릴레이션의 이행적 함수적 종속 관계 분석 A → B  ∧  B → C 학생(학번  교과목번호  성적  학과이름  학과전화번호)  FD:  {학번  교과목번호}  → 성적 학번 → (학과이름  학과전화번호)  학과이름 → 학과전화번호 FDD:  학번 교과목번호 성적 학과이름 학과전화번호  “학번 → 학과이름  학과이름 → 학과전화번호”라는 2개의 필요 충분 조건을 만족하므로 학과전화번호는 학번에 이행적 함수적 종속 관계이다.  ,1
릴레이션 정규화 26 Lesson.  단계별 정규화와 역정규화 1. 정규화 개념 2. 정규형 구분 3. 단계별 정규화 4. 역정규화 단계별 정규화와 역정규화 ,1
릴레이션 정규화 27 정규화 개념 1. 정규화 개념 (1) 정규화(Normalization)란?  - 정규화는 다음과 같이 여러 가지 관점에서 정의할 수 있다. ① 스키마 변환을 통해서 일련의 제약 조건을 만족하는 릴레이션을 만드는 과정이다.    ② 속성들 간의 종속성을 분석해서 하나의 릴레이션에는 하나의 종속성만 갖도록 릴레이션을 분해하는 과정이다. ③ 갱신 이상의 발생 요인인 데이터 중복을 최소화하기 위해서 일종의 제약조건을 기초로 릴레이션을 분해하는 과정이다.  ④ 불필요한 데이터 중복을 제거해서 논리적 데이터 모델을 단순화시키는 과정이다.  (2) 정규화의 원칙 ① 데이터의 중복을 최소화한다. ② 정보가 사라지지 않아야 한다. (정보의 무손실)  - 같은 의미의 정보를 유지하면서 더 바람직한 구조로 변환해야 한다.   ③ 다음과 같은 원칙에 따라 분해한다. a) 독립적인 관계는 별개의 릴레이션으로 표현한다. b) 릴레이션 각각에 대해 독립적인 조작이 가능해야 한다. ,1
릴레이션 정규화 28 정규화 개념 조인(Join) - 두 릴레이션과 관 련된 튜플을 하나의 튜 플로 결합하는 연산 (3) 정규화되지 않은 릴레이션의 문제점 ① 데이터 중복으로 인해 갱신 이상 현상이 발생한다.  ② 특정 정보를 표현하는 것이 불가능할 수 있다.  ③ 널(NULL) 값을 많이 포함하게 된다.  ④ 저장된 정보가 부정확할 수 있다.  (4) 정규화의 효과 ① 중복된 데이터가 제거되어 갱신 이상이 감소한다.  ② 데이터의 일관성 유지가 가능하다.  ③ 데이터 모델이 단순해진다.  ④ 무결성 제약조건을 만족시키기 위해서 필요한 프로그램 코드 양이 감소한다.  즉  DBMS가 자동 으로 처리해 주므로 응용 프로그램에서 처리해야 할 일의 양이 감소한다.  (5) 정규화의 문제점 - 릴레이션(테이블) 분해로 인해 많은 조인(Join) 연산이 발생하므로 질의에 대한 응답 시간이 느려질 수 있다.  보충 학습 ,1
릴레이션 정규화 29 [보충 학습] [보충 학습] 조인(Join) 연산 (1) 조인 연산이란?   - 두 릴레이션과 관련된 튜플을 하나의 튜플로 결합하는 연산으로  두 릴레이션의 각 튜플들을 1:1로 대응시킨 다음  조건에 맞는 튜플들만 구하는 연산이다.  - 세타 조인  동일 조인  자연 조인 등 여러 가지 유형의 조인 연산이 있다. - 관계 대수에서는 조인 연산자로 ⋈ 기호를 사용한다.   (2) 조인 연산 예제 - 학생 릴레이션과 교수 릴레이션의 조인 (조건: 학생.지도교수 = 교수.교수번호)  학생 릴레이션 학번 주민등록번호 이름 주소 휴대폰 지도교수 98201002 99202012 98201025 800321 811123 810923 김정욱 이기원 박문구 천안 서울 대전 010-2233-0495 010-2200-0045 010-2341-2312 01223 02355 01223  학생 ⋈ 지도교수=교수번호 교수 :  학생과 교수 릴레이션을 조인한 릴레이션 학번 주민등록번호 이름 주소 휴대폰 지도교수 98201002 99202012 98201025 800321 811123 810923 김정욱 이기원 박문구 천안 서울 대전 010-2233-0495 010-2200-0045 010-2341-2312 01223 02355 01223 교수번호 이름 연구실 휴대폰 01223 02355 05378 장경구 김민숙 이장수 A112 B344 A322 010-9876-2121 010-1234-5678 010-2266-9988 교수 릴레이션 교수번호 이름 연구실 휴대폰 01223 02355 05378 장경구 김민숙 이장수 A112 B344 A322 010-9876-2121 010-1234-5678 010-2266-9988 학생 릴레이션의 지도교수 속 성의 값과 교수 릴레이션의 교 수번호 속성의 값이 같은 것끼 리 조인하라는 의미 ,1
릴레이션 정규화 30 정규형 구분  정규형(Normal Form) - 어 떤 제약 조건을 만족하는 형 태 2. 정규형 구분 데이터 중복 감소 응답시간 단축 (1) 정규형(Normal Form)의 구분 - ‘데이터의 불필요한 중복 감소’와 ‘응답시간 단축’이라는 상반된 목표를 달성하기 위해서  릴레이션이 만족해야 하는 제약 조건을 구분하고  제약 조건에 따라 제1정규형 ~ 제5정규형 그리고 보이스코드 정규형으로 구분한다.   (2) 정규형의 포함 관계 정규화 정도가 높을수록 릴레이션이 더 많이 분 해되어 중복된 데이터가 감소하게 됨 정규화 정도가 낮을수록 하나 의 릴레이션에 많은 정보가 포 함되어 있어서 조인 연산이 불 필요하게 되므로  응답 시간이 단축됨 ,1
릴레이션 정규화 31 정규형 구분 (3) 단계별 정규형과 제약 조건 - 각 단계별로 정규형이 만족해야 하는 제약 조건과 정규화 방법에 차이가 있다.  정규형 단계 제약 조건 정규화 방법 제 1 정규형 (1NF) 모든 속성의 도메인이 원자 값이어야 한다.  다중치 속성 및 중복 속성을 분리한다. (다중치와 반복 그룹 제거) 제 2 정규형 (2NF) 모든 속성이 기본 키에 완전 함수적 종속이어야 한다.    기본 키에 부분 함수적 종속인 속성을 분리한다. (부분 함수적 종속 제거)  제 3 정규형 (3NF) 속성들 간에 이행적 함수적 종속이 없어야 한다.  이행적 함수적 종속인 속성을 분리 한다. (이행적 함수적 종속 제거)  보이스/코드 정규형 (BCNF) 후보 키가 아닌 결정자가 없어야 한다.  후보 키가 아니면서 결정자 역할을 하는 속성과 그 종속자를 분리한다.  (모든 결정자가 후보 키)  제 4 정규형 (4NF) 다치 종속(Multi-valued Dependency) 인 속성이 없어야 한다.  다치 종속인 속성을 분리한다. 제 5 정규형 (5NF) 조인 종속(Join Dependency)인 속성이 없어야 한다.  조인 종속인 속성을 분리한다. ,1
릴레이션 정규화 32 정규형 구분 (4) 제 3 정규형이 가장 좋은 이유 - 실무에서의 효율성을 고려해서 정규화의 최종 목표를 3NF나 BCNF로 정하는 것이 좋은데  그 이유는 1  2  4  5 정규형이 다음 표와 같은 문제점을 내포하기 때문이다.  구분 문제점 1NF  2NF ① 3NF와 비교하면 불필요한 중복이 많다. ② 불필요한 중복으로 인해 기억공간의 낭비가 크다.  4NF  5NF ① 3NF와 비교하면 릴레이션 수가 지나치게 많아질 가능성이 있다.   DB를 생성하면 테이블이 과다하게 세분화되어  조인(Join) 횟수가 늘어나서 질의에 대한 응답시간이 늦어지게 된다.  ② 다치 종속과 조인 종속이라는 복잡한 형태의 종속성까지 고려해야 한다. ,1
릴레이션 정규화 33 단계별 정규화 (1) 정규화 단계 - 일반적으로 제 1 정규형부터 보이스/코드(BCNF) 정규형까지 단계별로 진행한다. - 실제 정규화 과정은 정규형 순서와 다를 수 있다. 즉  어떤 정규형은 건너뛸 수 있다.   - 정규화는 실제 데이터 값이 아닌 개념적 측면에서 수행되어야 한다.    조인 종속성 제거 [정규화 단계}  3. 단계별 정규화 ,1
릴레이션 정규화 34 단계별 정규화 (2) 비정규형 1) 다중치 속성을 포함하고 있는 비정규형  복수 개의 값 각각에 대해 하나씩의 튜플을 생성해서 새로운 릴레이션(제 1 정규형)을 만든다. 예) ‘동아리’라는 다중치 속성을 포함하고 있는 비정규형 테이블인 학생1 테이블 (기본 키: 학번)  학번 이름 학과 동아리 20013426 박하늘 컴퓨터학과 {영어회화반  검도부}  20025714 홍길동 영문학과 {수화반  합창반} 20038540 김동아 음악학과 미술반 99570264 이몽룡 사회복지학과 검도부 97456123 최푸름 국어국문과 축구부 학생1  동아리라는 다중치 속성이 존재하므로 제1정규형을 만족하지 않는다.  ,1
릴레이션 정규화 35 단계별 정규화 학번 이름 학과 동아리 20013426 박하늘 컴퓨터학과 영어회화반 20013426 박하늘 컴퓨터학과 검도부 20025714 홍길동 영문학과 수화반 20025714 홍길동 영문학과 합창반 20038540 김동아 음악학과 미술반 99570264 이몽룡 사회복지학과 검도부 97456123 최푸름 국어국문과 축구부 -> 릴레이션의 모든 속성은 원자 값만을 가져야 하므로  동아리 속성의 복수 개의 값 각각에 대해 하나씩의 튜플을 생성해서 학생2라는 새로운 릴레이션(기본 키: {학번  동아리})을 만든다.  학생2  학생2 릴레이션은 제 1  정규형의 제약 조건(모든 속성의 도메인이 원자 값 이어야 함)을 만족한다.  학생2 릴레이션의 기본 키는 {학번   동아리}이다. 만약 학번만 기본 키 로 정의하는 경우  2번째  4번째 튜 플은 개체 무결성에 위반되므로 삽 입될 수 없다. ,1
릴레이션 정규화 36 단계별 정규화 학번 이름 학과 동아리 20013426 박하늘 컴퓨터학과 영어회화반 20013426 박하늘 컴퓨터학과 검도부 20025714 홍길동 영문학과 수화반 20025714 홍길동 영문학과 합창반 20038540 홍길순 음악학과 미술반 99570264 이몽룡 사회복지학과 검도부 97456123 최푸름 국어국문과 축구부 2) 중복된 속성을 포함하고 있는 비정규형  동일한 값이 중복되어 나타나는 반복 그룹을 분리해서 2개의 새로운 릴레이션(제 1 정규형)을 만든다. 예) 동일한 {학번  이름  학과} 값이 반복되는 학생2 릴레이션 (기본 키: {학번  동아리}) 학생2  학번  이름  학과 속성 의 동일한 값이 반복됨 ,1
릴레이션 정규화 37 단계별 정규화 -> 반복 그룹 {학번  이름  학과} 속성을 분리해서 학생3(기본 키: 학번) 릴레이션을 만들고    나머지 속성인 동아리 속성과 기본 키인 학번을 분리해서 학생4(기본 키 : {학번  동아리})라는 릴레이션을 만든다.  학번 이름 학과 20013426 박하늘 컴퓨터학과 20025714 홍길동 영문학과 20038540 홍길순 음악학과 99570264 이몽룡 사회복지학과 97456123 최푸름 국어국문과 학번 동아리 20013426 영어회화반 20013426 검도부 20025714 수화반 20025714 합창반 20038540 미술반 99570264 검도부 97456123 축구부 학생4  학생3  학생3  학생4 릴레이션 은 모두 제 1 정규형의 제약 조건 (모든 속성 의 도메인이 원자 값이 어야 함)을 만족한다.  ,1
릴레이션 정규화 38 단계별 정규화 (3) 제 1 정규형 (1st  Normal Form: 1NF) 1) 제 1 정규형의 제약 조건 - 모든 속성의 도메인이 원자 값을 가져야 한다.  2) 제 1 정규형의 갱신 이상의 원인 - 기본 키에 부분 함수적 종속 관계가 존재할 때 갱신 이상 현상이 발생한다.  기본 키로 식별되는 개체와는 무관한 속성이 존재한다는 의미이다. 즉  두 가지 독립적인 정보가 하나의 릴레이션에 표현된 것이다.  3) 제 1 정규형의 갱신 이상 해결 방법 - 릴레이션을 분해해서 부분 함수적 종속을 제거하여 제 2 정규형을 만든다.  ,1
릴레이션 정규화 39 단계별 정규화 4) 제 1 정규형의 갱신 이상 해결 예제 : 수강지도 릴레이션의 분해 • 수강지도(학번  교과목번호  지도교수  학과  성적) • 기본 키 : {학번  교과목번호} • 함수적 종속 : {학번  교과목번호}  → 성적 학번 → 지도교수 학번 → 학과 지도교수 → 학과 • FDD :  학번 과목번호 성적 학과 지도교수 릴레이션 확인 ,1
릴레이션 정규화 40 단계별 정규화 수강지도 학번 교과목번호 성적 학과 100 C413 A 컴퓨터 100 E412 A 컴퓨터 200 C123 B 전기 300 C312 A 컴퓨터 300 C324 C 컴퓨터 300 C413 A 컴퓨터 400 C312 A 컴퓨터 400 C324 A 컴퓨터 400 C413 B 컴퓨터 400 E412 C 컴퓨터 지도교수 P1 P1 P2 P3 P3 P3 P1 P1 P1 P1 릴레이션 확인 ,1
릴레이션 정규화 41 단계별 정규화 ① 제 1 정규형인 수강지도 릴레이션에 존재하는 갱신 이상 분석 ⓐ 삽입 이상 - 500번 학생의 지도교수가 P4라는 사실을 삽입하려 할 때  어떤 과목을 수강하지 않는 한 삽입하는 것이 불가능하다.  ⓑ 삭제 이상 - 200번 학생이 C123의 수강을 취소해서 이 데이터가 삭제되는 경우  지도교수가 P2라는 유용한 정보까지 삭제된다.  ⓒ 수정 이상 - 400번 학생의 지도교수를 P1에서 P3로 변경하는 경우  학번이 400인 4개 튜플의 지도교수를 모두 P3로 변경하지 않으면 데이터 불일치가 발생한다.  ② 수강지도 릴레이션에 존재하는 갱신 이상의 원인 분석 - 지도교수와 학과 속성이 기본 키인 {학번  교과목번호}에 부분 함수적 종속 관계가 존재한다.  ,1
릴레이션 정규화 42 단계별 정규화 ③ 릴레이션 분해 - 부분 함수적 종속이 존재하지 않도록 다음과 같이 2개의 릴레이션으로 분해한다.   지도(학번  지도교수  학과) 수강(학번(FK)  교과목번호  성적) 학번 교과목번호 성적 100 C413 A 100 E412 A 200 C123 B 300 C312 A 300 C324 C 300 C413 A 400 C312 A 400 C324 A 400 C413 B 400 E412 C 수강 학번 학과 100 컴퓨터 200 전기 300 컴퓨터 400 컴퓨터 지도교수 P1 P2 P3 P1 지도 지도와 수강 릴레이션은 각 각 제 2 정규형의 제약조건 (모든 속성이 기본 키에 완 전 함수적 종속이어야 함) 을 만족한다.  ,1
릴레이션 정규화 43 단계별 정규화 프로젝션(Projection)  - 릴레이션의 특정 속성만으로 구성된 새로운 릴레이션을 구하는 연산 5) 무손실 분해(Nonloss Decomposition)  - 프로젝션(Projection)으로 분해된 릴레이션들은 조인(Join)을 통해 원래의 릴레이션으로 복귀될 수 있어야 한다.  - 원래의 릴레이션에서 얻을 수 있는 정보는 분해된 릴레이션들로부터도 얻을 수 있으나   그 역은 성립하지 않는다.  예)  앞의 예에서  500번 학생의 지도교수가 P4라는 정보는 2NF으로 분해된 지도 릴레이션에는 삽입할 수 있지만  1NF인 수강지도 릴레이션에는 삽입할 수 없음 1NF 2NF 프로잭션 조인 보충 학습 ,1
릴레이션 정규화 44 [보충 학습] [보충 학습] 프로젝션(Projection) 연산 (1) 프로젝션 연산이란?   - 릴레이션의 특정 속성만으로 구성된 새로운 릴레이션을 구하는 연산이다.  - 즉  릴레이션의 수직적 부분 집합을 구하는 연산이다. - 관계 대수에서는 프로젝션 연산자로  기호를 사용한다.   (2) 프로젝션 연산 예제 - 학생 릴레이션에서 학번  이름  휴대폰 속성만 프로젝션 한다.  학생 릴레이션 학번 주민등록번호 이름 주소 휴대폰 지도교수 98201002 99202012 98201025 800321 811123 810923 김정욱 이기원 박문구 천안 서울 대전 010-2233-0495 010-2200-0045 010-2341-2312 01223 02355 01223  학생 (학번  이름  휴대폰) :  학번 이름 휴대폰 98201002 99202012 98201025 김정욱 이기원 박문구 010-2233-0495 010-2200-0045 010-2341-2312 학생 릴레이션에서 학번  이름   휴대폰 속성만 프로젝션 하라 는 의미 ,1
릴레이션 정규화 45 단계별 정규화 (4) 제 2 정규형 (2nd  Normal Form: 1NF) 1) 제 2 정규형의 제약 조건 - 모든 속성이 기본 키에 완전 함수적 종속이어야 한다.    2) 제 2 정규형의 갱신 이상의 원인 - 이행적 함수적 종속 관계가 존재할 때 갱신 이상이 발생한다. 3) 제 2 정규형의 갱신 이상 해결 방법 - 릴레이션을 분해해서 이행적 함수적 종속을 제거하여 제 3 정규형을 만든다.  ,1
릴레이션 정규화 46 단계별 정규화 4) 제 2 정규형의 갱신 이상 해결 예제 : 지도 릴레이션의 분해 • 지도(학번  지도교수  학과) • 기본 키 : 학번 • 함수적 종속 :   학번 → 지도교수 학번 → 학과 지도교수 → 학과 • FDD :  학번 학과 지도교수 학번 학과 100 컴퓨터 200 전기 300 컴퓨터 400 컴퓨터 지도교수 P1 P2 P3 P1 지도 릴레이션 확인 ,1
릴레이션 정규화 47 단계별 정규화 a) 제 2 정규형인 지도 릴레이션에 존재하는 갱신 이상 분석 ① 삽입 이상 - 지도 학생 없이는 어떤 교수가 특정 학과에 속한다는 정보를 삽입하는 것이 불가능하다.  ② 삭제 이상 - 300번 학생의 정보를 삭제하면  지도교수 P3가 컴퓨터학과에 속한다는 유용한 정보까지 삭제된다.  ③ 수정 이상 - 지도교수 P1의 소속을 컴퓨터에서 전기로 변경하는 경우  학번이 100과 400인 2개 튜플의 학과를 모두 전기로 변경하지 않으면 데이터 불일치가 발생한다.  (실제 상황이라면 100과 200의 지도교수를 변경해야 함)  b) 지도 릴레이션에 존재하는 갱신 이상의 원인 분석 - 학번  지도교수  학과라는 3개 속성 사이에 이행적 함수적 종속 관계가 존재한다.  ,1
릴레이션 정규화 48 단계별 정규화 c)  릴레이션 분해 - 이행적 함수적 종속이 존재하지 않도록 다음과 같이 2개의 릴레이션으로 분해한다.   학생지도(학번  지도교수) 교수소속(교수  학과) 학과 컴퓨터 전기 컴퓨터 교수 P1 P2 P3 교수소속 학생지도 학번 100 200 300 400 지도교수 P1 P2 P3 P1 학생지도와 교수소속 릴레 이션은 모두 제 3 정규형의 제약조건(속성들 간에 이행 적 함수적 종속이 없어야 함)을 만족한다.  ,1
릴레이션 정규화 49 단계별 정규화 5) 무손실 분해 - 원래의 릴레이션에서 얻을 수 있는 정보는 분해된 릴레이션들로부터도 얻을 수 있다. 그러나  그 역은 성립하지 않는다.  예)  지도교수 P4가 전자에 속한다는 정보는 3NF으로 분해된 교수소속 릴레이션에는 삽입할 수 있지만   2NF인 지도 릴레이션에는 삽입할 수 없음 2NF 3NF 프로잭션 조인 ,1
릴레이션 정규화 50 단계별 정규화 (5) 제 3 정규형 (3rd  Normal Form: 1NF) 1) 제 3 정규형의 제약 조건 - 속성들 간에 이행적 함수적 종속이 없어야 한다.  2) 제 3 정규형의 갱신 이상의 원인 - 후보 키가 아닌 결정자가 존재할 때 갱신 이상 현상이 발생한다. 3) 제 3 정규형의 갱신 이상 해결 방법 - 후보 키가 아니면서 결정자 역할을 하는 속성과 그 종속자를 분리해서  모든 결정자가 후보 키가 되는 보이스/코드 정규형(BCNF)을 만든다.  4) 3NF의 약점 ① 복수개의 후보 키를 갖고 있고  ② 후보 키들이 복합 속성들로 구성되고  ③ 후보 키들이 서로 중첩되는 경우에는  3NF로는 불충분하므로 보다 일반적인 BCNF로 변환해야 한다. ,1
릴레이션 정규화 51 단계별 정규화 5) 제 3 정규형의 갱신 이상 해결 예제 : 수강과목 릴레이션의 분해 • 수강과목(학번  교과목  교수) • 제약 조건 ① 한 학생은 각 과목에 대해 오직 한 교수의 강의만 수강한다.  ② 각 교수는 한 과목만 담당한다.  ③ 같은 과목을 여러 교수가 담당할 수 있다.   • 후보 키 : {학번  교과목}   {학번  교수} • 기본 키 : {학번  교과목}  • 함수적 종속 : {학번  교과목} → 교수 교수 → 교과목 • FDD  수강과목 학번 교과목 100 프로그래밍 100 자료구조 200 프로그래밍 200 자료구조 교수 P1 P2 P1 P3 300 자료구조 300 프로그래밍 P3 P4 릴레이션 확인 ,1
릴레이션 정규화 52 단계별 정규화 a) 제 3 정규형인 수강과목 릴레이션에 존재하는 갱신 이상 분석 ① 삽입 이상 - 교수 P5가 자료구조 교과목을 담당한다는 정보의 삽입은 학번(수강 학생)이 없으면 불가능하다.  ② 삭제 이상 - 100번 학생이 자료구조를 취소해서 데이터를 삭제하면  P2가 담당교수라는 유용한 정보 까지 삭제된다.  ③ 수정 이상 - 지도교수 P1이 프로그래밍 과목 대신 자료구조를 담당하게 되면  P1이 포함된 모든 튜플 을 변경하지 않으면 데이터 불일치가 발생한다.  b) 수강과목 릴레이션에 존재하는 갱신 이상의 원인 분석 - 교수 속성이 후보 키가 아닌데 결정자 역할을 한다.  ,1
릴레이션 정규화 53 단계별 정규화 c)  릴레이션 분해 (ㄱ)  후보 키가 아니면서 결정자 역할을 하는 ‘교수’ 속성과 그 결정자에 함수적으로 종속하는 속성인 ‘교과목’을 별도의 릴레이션(교수과목)으로 분해하고  결정자인 교수 속성을 기본 키로 정의한다. (ㄴ) 기존 릴레이션에 결정자(교수 속성)를 남겨서 기본 키의 구성 요소가 되도록 하고  이 결정자가 새로운 릴레이션(교수과목)에 대한 외래 키 역할도 하도록 한다. 교수과목(교수  교과목)                 ------ (ㄱ)  수강교수(학번  교수(FK)) ------ (ㄴ)  수강교수 학번 100 100 200 200 교수 P1 P2 P1 P3 300 300 P3 P4 교과목 프로그래밍 자료구조 자료구조 프로그래밍 교수 P1 P2 P3 P4 교수과목 교수과목과 수강교수 릴레이션 은 모두 BCNF의 제약조건(후 보 키가 아닌 결정자가 없어야 함)을 만족한다.  ,1
릴레이션 정규화 54 단계별 정규화 (6) 보이스/코드 정규형 (Boy ce/Codd Normal Form: BCNF) 1) BCNF의 제약 조건 - 후보 키가 아닌 결정자가 없어야 한다.  2) BCNF가 고안된 이유 - 기본 키가 둘 이상의 속성으로 구성된 복합 키이고  복합 키가 둘 이상 존재할 경우에 발생되는 갱신 이상 현상을 방지하기 위해서 고안되었다.  3) BCNF의 특징 - 하나의 후보 키만 가진 릴레이션이 3NF이면 동시에 BCNF도 만족하며  이를 강한 3NF(Strong 3NF)이라고도 칭한다.   ,1
릴레이션 정규화 55 역정규화 (1) 정규화의 문제점 - 정규화 단계가 진행될수록 릴레이션이 분해되므로 원하는 정보를 얻기 위해서 조인의 필요성이 증가되어 성능이 저하될 수 있다.  - 즉  불필요한 데이터의 중복은 감소하지만 질의에 대한 응답 시간은 증가할 수 있다.  불필요한 데이터의 중복 감소 응답 시간 증가 (성능 저하) 릴레이션 분해 4. 역정규화 ,1
릴레이션 정규화 56 역정규화 (2) 역정규화(Denormalization)란?  - 성능에 대한 요구를 만족시키기 위해 데이터 중복과 갱신 이상을 대가로 치르면서 보다 낮은 정규형으로 되돌아가는 것을 의미한다. - 즉  빈번하게 수행되는 검색 질의의 수행 속도를 높이기 위해서 이미 분해된 두 개 이상의 릴레이션을 합쳐서 하나의 릴레이션으로 만드는 작업이다.  - 예:   역정규화 해도 중복된 데이터는 관리해야 하므로  응용 프로그램에서 별도로 데이터 무결성을 보장하기 위한 비용이 발생될 수 있음 ,1
릴레이션 정규화 57 쉼터 쉼터 저작권 검토!!  ,1
